{
  "name": "m",
  "version": "1.3.1",
  "description": "mongodb version management",
  "homepage": "https://github.com/aheckmann/m",
  "bugs": {
    "url": "https://github.com/aheckmann/m/issues"
  },
  "bin": {
    "m": "./bin/m"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "mongodb",
    "version",
    "manage",
    "binary",
    "mongoose"
  ],
  "author": {
    "name": "Aaron Heckmann",
    "email": "aaron.heckmann+github@gmail.com"
  },
  "contributors": [
    {
      "name": "TJ Holowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/aheckmann/m.git"
  },
  "readme": "# m\n\n MongoDB version manager\n\n## Installation\n\n    $ npm install -g m\n\nor\n\n    $ git clone git://github.com/aheckmann/m.git && cd m && make install\n\n### Installing Binaries\n\nInstall a few versions, the version given becomes the active mongodb binary once installation is complete.\n\n    $ m 2.0.7\n    $ m 2.2.0-rc2\n\nList installed binaries:\n\n    $ m\n\n      2.0.6\n    Î¿ 2.0.7\n      2.2.0-rc2\n\nUse or install the latest official release:\n\n    $ m latest\n\nUse or install the stable official release:\n\n    $ m stable\n\nInstall a custom or patched version of mongodb from a tarball:\n\n    $ m custom 2.1.2-me https://github.com/aheckmann/mongo/tarball/r2.1.2\n    \nInstall a version of mongodb from source (requires `scons`):\n\n    $ m 2.2.3-rc0 source\n\nInstall an enterprise release\n\n    $ m 3.2.8-ent\n\n### Removing Binaries\n\nRemove some versions:\n\n    $ m rm 2.2.0-rc1 2.0.4 2.4.0-rc0 3.2.8-ent\n\n_Note that you cannot remove the actively running version. Change to a different version before removing._\n\n### Binary Usage\n\nWhen running multiple versions of mongodb, we can target\nthem directly by asking `m` for the binary path:\n\n    $ m bin 2.0.7\n    /usr/local/m/versions/2.0.7/bin/\n    \nStart up mongod 2.0.7 regardless of the active version:\n\n    $ m use 2.0.7 --port 29000 --dbpath /data/2.0.7/\n\nExecute a script with the 2.0.7 shell regardless of the active version:\n\n    $ m shell 2.0.7 some.js\n\nwith flags:\n\n    $ m s 2.0.7 --port 29000 --eval 1+1\n    \nWhen installing or changing the active version we might want to run custom scripts:\n\n    $ m pre install /path/to/my/script\n    $ m post install /path/to/script\n    $ m pre change /path/to/my/script\n    $ m post change /path/to/script\n    \nMultiple scripts may be added for any event. To add two `pre change` scripts:\n\n    $ m pre change /path/to/script1\n    $ m pre change /path/to/script2\n    \nScripts are executed in the order they were added.\n    \nList all pre change hooks:\n\n    $ m pre change\n    \n    /path/to/script1\n    /path/to/script2\n    \nList all post install hooks:\n\n    $ m post install\n    \n    /path/to/scriptA\n    /path/to/scriptB\n    /path/to/scriptC\n    \nTo remove a post install hook:\n\n    $ m post install rm /path/to/scriptB\n    \nRemove all post install hooks:\n\n    $ m post install rm\n\n## Usage\n\nOutput from `m --help`:\n\n```\n  Usage: m [options] [COMMAND] [config]\n\n  Commands:\n\n    m                            Output versions installed\n    m latest [config ...]        Install or activate the latest mongodb release\n    m stable [config ...]        Install or activate the latest stable mongodb release\n    m <version> [config ...]     Install and/or use mongodb <version>\n    m custom <version> <tarball> [config ...]  Install custom mongodb <tarball> with [args ...]\n    m use <version> [args ...]   Execute mongod <version> with [args ...]\n    m shard <version> [args ...] Execute mongos <version> with [args ...]\n    m shell <version> [args ...] Open a mongo shell <version> with [args ...]\n    m bin <version>              Output bin path for <version>\n    m rm <version ...>           Remove the given version(s)\n    m --latest                   Output the latest mongodb version available\n    m --stable                   Output the latest stable mongodb version available\n    m ls                         Output the versions of mongodb available\n    m src <version>              Output the url for source used for the given <version> (useful if installed from source)\n    m pre <event> [script]       Declare one or list scripts to execute before <event> (scripts must use absolute paths)\n    m post <event> [script]      Declare one or list scripts to execute after <event> (scripts must use absolute paths)\n    m pre <event> rm [script]    Remove pre <event> script\n    m post <event> rm [script]   Remove post <event> script\n\n  Events:\n\n    change   Occurs when switching mongodb versions\n    install  Occurs when installing a previously uninstalled mongodb version\n\n  Options:\n\n    -V, --version   Output current version of m\n    -h, --help      Display help information\n\n  Aliases:\n\n    which   bin\n    use     as\n    shard   sd\n    list    ls\n    custom  c\n    shell   s\n```\n\n## Details\n\n `m` by default installs mongodb to _/usr/local/m/versions_, from\n which it can see what you have currently installed, and activate previously installed versions of mongodb when `m <version>` is invoked again.\n\n Activated mongodb versions are then installed to the prefix _/usr/local_, which may be altered via the __M_PREFIX__ environment variable.\n\n To alter where `m` operates simply export __M_PREFIX__ to whatever you prefer.\n\n## License\n\n[MIT](https://github.com/aheckmann/m/blob/master/LICENSE)\n\n## Inspiration\n\nYes tj, this is nearly identical to [n](https://github.com/visionmedia/n). Huge thanks!\n\n",
  "readmeFilename": "README.md",
  "_id": "m@1.3.1",
  "dist": {
    "shasum": "6ab8f8e0f029d617675a45d0ad757b111a735d8e"
  },
  "_from": "m@",
  "_resolved": "https://registry.npmjs.org/m/-/m-1.3.1.tgz"
}
